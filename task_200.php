<?php
/*
 * Анонс #200. Расстояние Дамерау — Левенштейна
 *
 * Справка
 *
 * Дана текстовая строка. С ней можно выполнять следующие операции:
 * - Заменить один символ строки на другой символ.
 * - Удалить один произвольный символ.
 * - Вставить произвольный символ в произвольное место строки.
 * - Переставить два соседних символа местами. При этом между переставленными символами нельзя вставлять другие символы.
 *
 * Например, дана строка "СОК"
 * при помощи 1й операции из исходной строки можно получить строку "СУК";
 * при помощи 2й операции — строку "ОК";
 * при помощи 3й операции — строку "СТОК";
 * при помощи четвертой операции — строку "ОСК".
 *
 * Минимальное количество таких операций, при помощи которых можно из одной строки получить другую, называется расстоянием редактирования или расстоянием Дамерау-Левенштейна.
 *
 * Задача
 *
 * Попробуйте реализовать алгоритм определения расстояния Дамерау-Левенштейна для двух заданных строк.
 * Входные данные: str1, str2 - строки, длина которых не превосходит 1000 символов.
 * Вывод: расстояние Дамерау-Левенштейна для исходных строк.
 *
 * Пример:
 * str1 = "XABCDE";
 * str2 = "ACBYDF"
 * Output = 4
 * Пояснение к примеру:
 * Вторая строка может быть получена из первой при помощи четырех операций редактирования: удаления буквы X, перестановки букв B и C, вставки буквы Y и замены буквы E на букву F.
 */
require_once 'functions.php';

function task_200(string $str1, string $str2): int
{
  $n = strlen($str1) + 1;
  $m = strlen($str2) + 1;
  $d = array();
  for ($i = 0; $i < $n; $i++) $d[$i][0] = $i;
  for ($i = 0; $i < $m; $i++) $d[0][$i] = $i;

  for ($i = 1; $i < $n; $i++) {
    for ($j = 1; $j < $m; $j++) {
      $cost = $str1[$i - 1] == $str2[$j - 1] ? 0 : 1; // символы равны и менять не нужно
      $d[$i][$j] = min(
        $d[$i - 1][$j] + 1, // delete
        $d[$i][$j - 1] + 1, // insert
        $d[$i - 1][$j - 1] + $cost // replace
      );

      if ($i > 1 && $j > 1
        && $str1[$i - 1] == $str2[$j - 2]
        && $str1[$i - 2] == $str2[$j - 1]
      ){
        $d[$i][$j] = min(
          $d[$i][$j],
          $d[$i - 2][$j - 2] + $cost // swap
        );
      }
    }
  }

  return $d[$n-1][$m-1];
}

echo task_200("XABCDE", "ACBYDF") . PHP_EOL;
echo task_200("programma", "pogarmmma") . PHP_EOL;
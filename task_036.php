<?php
/*
 * Task 36. Единицы
 * Задача: В арифметическом выражении можно использовать число 1, сложение, умножение и скобки.
 * Нужно вывести наименьшее количество единиц, ктр нужны, чтобы получить заданное натуральное число N.
 *
 * Например, чтобы получить число 6 необходимо 5 единиц:
 * 6 = (1 + 1) * (1 + 1 + 1)
 * Для числа 7 - 6 единиц:
 * 7 = (1 + 1 + 1) * (1 + 1) + 1
 *
 * Решение: для получение значения числа N необходимо построить таблицу всех случаев от 1 до N
 *
 * 1. Пусть последней операцией было сложение. Первое слагаемое i состоит из f(i), тогда второе n-i состоит из f(n-i)
 * Значение i следует выбрать таким образом, чтобы сумма f(i) + f(n-i) была минимальной.
 * Получаем первую формулу:  f(n) = min[f(i) + f(n-i)], где 1 <= i <= n
 *
 * 2. Пусть последней операцией было умножение. Первый множитель i состоит из f(i) единиц, второй множитель n/i из f(n/i).
 * Тут нужно учесть, что n делится на i без остатка.
 * Получаем вторую формулу: f(n) = min[f(i) + f(n/i)], где 1 <= i <= n
 *
 * В итоге получаем результирующую формулу: f(n) = Min[min[f(i) + f(n-i)], min[f(i) + f(n/i)] ], где 1 <= i <= n
 */

header("Content-Type: text/plain; charset=utf8"); // Без этого перенос строки не работает
const N = 125; // число, которое нужно представить
/* справочник значение от 1 до N, знакомые значение от 1 до 5 заполняем сразу
  weight - минимальное количество единиц, которыми можно выразить
  operation - представление
*/
$dictionary = [
  1 => ['weight' => 1, 'operation' => '1'],
  2 => ['weight' => 2, 'operation' => '1+1'],
  3 => ['weight' => 3, 'operation' => '1+1+1'],
  4 => ['weight' => 4, 'operation' => '1+1+1+1'],
  5 => ['weight' => 5, 'operation' => '1+1+1+1+1']
];

// Формируем таблицу значений
for ($i = 6; $i < N+1; $i++){
  $dictionary[$i] = ['weight' => $i, 'operation'=> '']; // По умолчанию считаем число единиц равным самому числу
  for ($j = 2; $j < $i; $j++){
    // Проверяем первую формулу, можно ли сделать меньшую сумму
    if ($dictionary[$j]['weight'] + $dictionary[$i-$j]['weight'] < $dictionary[$i]['weight']){
      $dictionary[$i]['weight'] = $dictionary[$j]['weight'] + $dictionary[$i-$j]['weight'];
      $dictionary[$i]['operation'] = '(' . $dictionary[$j]['operation'] . ') + (' . $dictionary[$i-$j]['operation'] . ')';
    }

    // Проверяем вторую формулу
    if (($i % $j) == 0){
      if ($dictionary[$j]['weight'] + $dictionary[$i/$j]['weight'] < $dictionary[$i]['weight']){
        $dictionary[$i]['weight'] = $dictionary[$j]['weight'] + $dictionary[$i/$j]['weight'];
        $dictionary[$i]['operation'] = '(' . $dictionary[$j]['operation'] . ') * (' . $dictionary[$i/$j]['operation'] . ')';
      }
    }
  }
  echo $i . ': ' . $dictionary[$i]['weight'] . ' - ' . $dictionary[$i]['operation'] . PHP_EOL;
}
<?php
/*
 * Task 58. Формула 1
 *
 * Задача: в формуле 1 изменилиись правила. Теперь перед тем как выехать команда может выполнить нектр модернизации болида.
 * Для каждой модернизации известно на сколько она увеличивает скорость болида, а также время за ктр она может быть выполнена.
 * Можно выполнить несколько различных модернизаций, но каждая модернизация может быть выполнена не более одного раза.
 *
 * Дано расстояние трассы Dist (метры),
 * Скорость болида без модернизации - V (м/с)
 * Vi - Массив, i-й элемент массива содержит прирост скорости (м/с) после модернизации болида.
 * Ti - Массив, i-й элемент массива содержит время (сек) затрачиваемое на i-ю модернизацию из массива Vi
 * Вывести минимальное время, ктр потребуется пилоту для того, чтобы проехать трассу длиной l с учетом времени на всевозможные модернизации болида.
 *
 * Например, Dist = 100  V = 5  Vi = [ 5 5 ] Ti = [ 3 3 ]
 * Вывод: 12.66
 *
 * Идея: перебирать все варинты в поисках оптимального значения (плохой алгоритм)
 */

include_once ('functions.php');
//list($dist, $v, $vi, $ti) = [100, 5, [5, 5], [3, 3]];
list($dist, $v, $vi, $ti) = [100, 5, [1, 2, 3], [2, 4, 6]];

$best_time = $dist / $v; // изначально считаем лучшим результат без апгрейда
$best_set_indexes = null; // индексы лучшего набора

// Проверим будет ли улучшение, если добавить только один апгрейд
foreach ($vi as $key => $val){
  $new_time = ($dist / ($v + $val)) + $ti[$key];
  if ($new_time < $best_time){
    $best_time = $new_time;
    $best_set_indexes = $key;
  }
}

// Проверим получим ли улучшение при различных компинациях
$count_set = count($vi); // количество элементов в сете
for ($i = 2; $i < $count_set + 1; $i++){
  $sets = combinationsN_M($count_set, $i); // Получили возможные варианты для данного количества элементов
  foreach ($sets as $set){
    list ($v_up, $t_up) = [0, 0]; // Время и скорость которые получим за счёт данного апгрейда
    foreach ($set as $value){
      $v_up += $vi[$value-1];
      $t_up += $ti[$value-1];
    }
    $new_time = ($dist / ($v + $v_up) + $t_up);
    if ($new_time < $best_time){
      $best_time = $new_time;
      unset($best_set_indexes);
      $best_set_indexes = $set;
    }
  }
}

echo $best_time . PHP_EOL;
print_r($best_set_indexes);
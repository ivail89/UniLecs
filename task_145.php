<?php
/*
 * Анонс #145. Разгаданный кроссворд
 * Задача: в газетке дан кроссворд, ктр задан таблицей N*N, где в каждой клетке таблицы указана какая-то буква.
 * По правилам этого кроссворда нужно найти определенные слова, причем они должны быть расположены так,
 * чтобы клетка, в ктр расположена след.буква слова, была соседней с клеткой, в ктр записана предыдущая буква.
 * И кто-то уже выписал все слова из этого кроссворда.
 *
 * Но после того, как кроссворд разгадан, оставшиеся (неиспользованные буквы) образуют пасхалку, ктр и нужно найти.
 *
 * Входные данные: arr[N][N] - символьная матрица, ктр задает таблицу кроссворда, где N от 1 до 100.
 * keys[M] - разгаданные слова кроссворда.
 * Гарантируется, что в кроссворде можно найти по описанным правилам все разгаданные слова.
 *
 * Вывод: оставшиеся буквы кроссворда.
 *
 * Пример:
{ { 'U', 'T', 'H', 'E' },
  { 'N', 'A', 'S', 'K' },
  { 'I', 'L', 'E', 'C' },
  { 'L', 'L', 'O', 'S' } }
 *
 * Keys: [ "TASK",  "UNILECS"]
 * Answer: HELLO
*/

require_once 'functions.php';
$arr = [
  [ 'U', 'T', 'H', 'E' ],
  [ 'N', 'A', 'S', 'K' ],
  [ 'I', 'L', 'E', 'C' ],
  [ 'L', 'L', 'O', 'S' ]
];
$keys = ["TASK",  "UNILECS"];

$row = array();
// приводим двухмерный массив к одномернутому
array_map(function($a) use(&$row){
  $row = array_merge($row,$a);
}, $arr);

foreach ($keys as $word) {
  $len = strlen($word);
  for ($i = 0; $i < $len; $i++) {
    // для оптимизации можно не начинать каждый раз сначала, а запоминать позицию на которой остановились, но тут "такая" постановка задачи, поэтому лучше так
    foreach ($row as $k => $letter) {
      if ($word[$i] == $letter) {
        unset($row[$k]);
        break;
      }
    }
  }
}

echo implode($row);
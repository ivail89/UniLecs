<?php
/*
 * Task 51. Доставка заказов
 * Задача: Алисе и Бобу нужно подготовить и доставить N заказов.
 * Дано время t1 - время упаковки посылки Алисой, время t2 - время доставки посылки Бобом. Зная время t1, t2 вычислить наименьшее время, необходимое для выполнения всех заказов. За раз, Алиса и Боб могут доставить только один заказ.
 *
 * Входные данные:
 * Дан двумерный массив, в первой строке – время упаковки каждого заказа Алисой, а во второй – время его доставки Бобом. (0 < t1, t2 ≤ 1000)
 * Написать функцию, ктр вернет наименьшее время доставки всех заказов.
 *
 * Например,
 * 4  4  30  6  2
 * 5  1  4  30  3
 *
 * Вывод: 47
 */
header("Content-Type: text/plain; charset=utf8"); // Без этого перенос строки не работает
$allice = [4, 4, 30, 6, 2];
$bob = [5, 1, 4, 30, 3];

//Функция для вывода содержимого в архиве в удобном для анализа виде
function printArray($arr){
  foreach ($arr as $value){
    echo $value . ' ';
  }
  echo PHP_EOL;
}

// Формируем порядок работы по принципу минимальный срок укаковки в начало, минимальный срок доставки в конец
function sortGifts($a, $b){
  list($headA, $tailA, $headB, $tailB) = array ([], [], [], []);
  // количество подарко у Алисы и Боба одинаково, поэтому сортируем пока не закончатся у одного
  while (count($a) > 0){
    $min = min(reset($a), reset($b)); // Получаем первое значение, чтобы было с чем сравнивать
    $minKey = key($a); // Сохраняем ключ, чтобы по нему смотреть в оба массива
    foreach ($a as $key => $value){
      if ($a[$key] < $min || $b[$key] < $min){
        $min = min($a[$key], $b[$key]); // min - используем на случай если оба числа меньше
        $minKey = $key; // Сохраняем ключ с минимальным значением
      }
    }

    // Так как minKey не показывает, где было минимальное значение
    if ($a[$minKey] < $b[$minKey]){ // добавляем в начало нового массива
      array_push($headA, $a[$minKey]);
      array_push($headB, $b[$minKey]);
    } else {
      array_unshift($tailA, $a[$minKey]); // добавляем в конец нового массива
      array_unshift($tailB, $b[$minKey]);
    }
    //удаляем из поиска
    unset($a[$minKey]);
    unset($b[$minKey]);
  }

  // При выводе склеиваем начало и конец массива
  return [
    'a' => array_merge($headA, $tailA),
    'b' => array_merge($headB, $tailB),
  ];
}

$s = sortGifts($allice, $bob);
$a = 0; $sum = 0;
foreach ($s['a'] as $key => $item){
  $a += $s['a'][$key]; // Сумма на упаковку всех подарков
  $sum = max($a, $sum) + $s['b'][$key]; // max нужен, чтобы определить после доставки последнего Боб будет ждать следующего или нет
}

printArray($s['a']);
printArray($s['b']);
echo $sum;
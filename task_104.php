<?php
/*
 * Задача 104: Кошки - мышки
 * Мышка пытается пробежать по городу, спасаясь от голодных котов.
 * Ей нужно преодолеть путь от 1го перекрестка до последнего, но на каждой улице ее поджидают сумасшедшие коты.
 * Мышке нужно пройти так, чтобы вероятность спастись была максимальна. Помогите найти ей такой маршрут.
 *
 * Входные данные: N - кол-во перекрестков, RoadArr - массив, ктр определяет каждую улицу.
 * Элемент массива RoadArr содержит 3 значения:
 *    a, b - перекрестки, между ктр проходит улица,
 *    SafeValue - вероятность спастись от котов на этой улице.
 * Есть только одна улица между любыми 2мя перекрестками.
 *
 * Вывод: вывести самый безопасный маршрут для мышки и общую вероятность спастись на этом маршруте.
 *
 * Пример: N = 4,
 * RoadOfDeathArr = (1, 2, 98), (1, 3, 50), (1, 4, 20), (2, 4, 99), (3, 4, 70)
 * Answer: Безопасный маршрут: 1 - 2 - 4; вероятность спасения на маршруте = ~97.02
 *
 * Идея: см. рисунок (task_104.png) сводим к задачам по работе с графами. Алгоритм Дейкстры
 */
require_once 'functions.php';

$n = 4;
$roadOfDeathArr = [
  [1, 2, 0.98],
  [1, 3, 0.50],
  [1, 4, 0.20],
  [2, 4, 0.99],
  [3, 4, 0.70]
];

$matrix = array_fill(1, 4, array_fill(1, 4, 0));
$map = array_fill(1, 4, 1); // карта в которой будем хранить вероятности всех перекрестков
$way = [1]; // начинаем всегда из первой точки

// приведем к графу табличного вида
foreach ($roadOfDeathArr as $value) {
  $matrix[$value[0]][$value[1]] = $value[2];
  $matrix[$value[1]][$value[0]] = $value[2]; // так как мышь может двигаться в двух направлениях
}

while (true) {
  $cur = end($way);
  for ($i = 1; $i < $n + 1; $i++) {
    if (in_array($i, $map)) continue; // точка отмечена как посещенная
    if ($map[$i] == 1) {
      $map[$i] = $matrix[$cur][$i]; // если на этом перекрестке первый раз, то присваиваем вероятность по умолчанию
    } else {
      $map[$i] = ($map[$cur] * $matrix[$cur][$i]) > $map[$i] ?
        $map[$cur] * $matrix[$cur][$i] :
        $map[$i];
    }
  }
  $neighbours = array();
  for ($i = 1; $i < $n + 1; $i++) {
    if (in_array($i, $way)) continue; // точка отмечена как посещенная
    if ($matrix[$cur][$i] != 0) {
      $neighbours[$i] = $map[$i]; // получим значения вершин соседей
    }
  }
  if (count($neighbours) == 0) break; // перебрали все варианты
  else $cur = array_search(max($neighbours), $neighbours); // новая вершина, это максимальное значение из соседей
  $way[] = $cur;
  if ($cur == $n) break; // достигли крайней точки
}

printArray($way);
echo $map[$n];